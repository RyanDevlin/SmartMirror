#!/usr/bin/env bash

RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
LPURPLE='\033[0;35m'
NC='\033[0m' # No Color

: '
Black        0;30     Dark Gray     1;30
Red          0;31     Light Red     1;31
Green        0;32     Light Green   1;32
Brown/Orange 0;33     Yellow        1;33
Blue         0;34     Light Blue    1;34
Purple       0;35     Light Purple  1;35
Cyan         0;36     Light Cyan    1;36
Light Gray   0;37     White         1;37
'

proj_path=/home/pi/tars
case "$1" in
    help|-h|--help)
		echo " "
		echo -e "${CYAN}========================================================================${NC}"
		echo -e "${CYAN}||                                                                    ||${NC}"
		echo -e "${CYAN}|| [sherpa] transport scripts to interface with the Smart Mirror API  ||${NC}"
		echo -e "${CYAN}||                                                                    ||${NC}"
		echo -e "${CYAN}========================================================================${NC}"
		echo " "
		echo "Usage: sherpa [options] [arguments]"
		echo " "
		echo -e "${GREEN}OPTIONS:${NC}"
		echo " "
		echo "help, -h, --help           sherpa manual"
		echo "init, -i                   formats the current directory to act as a sherpa lobby"
		echo "                           -  A sherpa lobby contains a .metadata.json file and"
		echo "                              a .guests file."
		echo "                           -  the .metadata.json file contains the data the"
		echo "                              webserver needs to display the widget info on"
		echo "                              the configuration page"
		echo "                           -  the .guests file contains the names of the"
		echo "                              files which will be zipped and sent over to"
		echo "                              Pi. These should be all the project files"
		echo "                              needed to make your widget function"
		echo " "
		echo "add, -a filename(s)        adds the specified file names to the .guests file"
		echo "rem, -r                    removes files from the .guests file"
		echo "who, -w                    list the project files that will be shipped to the Pi"
		echo "ship, -s                   zips files in the .guests file and sends them to the Pi"
		echo " "
		exit 0
		;;
    ship|-s)

		ipaddr=$(cat ./.ip)
		while true; do
		    read -p "Is the IP address shown on the Mirror $ipaddr? [y/n]: " yn
		    case $yn in
		        [Yy]* ) break;;
		        [Nn]* ) read -p "Enter the IP address shown on the Mirror: " ip && echo "$ip" > .ip && echo "Thank you. Please try 'sherpa ship' again." && exit;;
		        * ) echo -e "${RED}\nPlease answer y or n\n${NC}";;
		    esac
		done

		while true; do
			echo ""
			echo "WARNING: Once you upload this widget you will not be able to change it's name."
			echo "Don't worry, you can still change the widget's code by using sherpa ship again."
			echo "If you need to change the name of your widget answer no and edit the .metadata.json file."
		    read -p "Continue? [y/n]: " yn
		    case $yn in
		        [Yy]* ) break;;
		        [Nn]* ) exit;;
		        * ) echo -e "${RED}\nPlease answer y or n\n${NC}";;
		    esac
		done

		# ZIP files in the .guests file and ship them over to the Raspberry Pi

		if [ ! -f "./.guests" ]; then # Check for .guests file
		    echo -e "${RED}No .guests file in this directory!${NC}"
		    echo -e "${RED}Be sure to navigate to the proper directory or use 'sherpa init' before using sherpa commands${NC}"
		    echo -e "${RED}Use 'sherpa help' for more options${NC}"
		    exit 1
		fi

		IFS=$'\n' files=($(cat "./.guests"))
		for i in $(seq ${#files[*]}); do
		    [[ ${files[$i-1]} = $name ]] && echo "${files[$i]}"
		done

		tar -zcvf guests.tar.gz ${files[@]} .metadata.json

		# Establish SCP connection
		#scp guests.tar.gz pi@10.186.132.73:"~/"
		scp guests.tar.gz pi@"$ipaddr":"~/"

		#./bundle  HERE WE MAKE AN ASSUMPTION: the user should only be able to sherpa init in the node directory. Add this later.

		# Establish SSH connection
		#ssh pi@10.186.132.73 /bin/bash << 'EOF'
		ssh pi@"$ipaddr" /bin/bash << 'EOF'
		cd ~/
		sudo mv guests.tar.gz ~/tars/node/sandbox/
		cd ~/tars/node/

		sudo ./peak & exit
EOF
#sudo ./peak
#		ssh pi@10.186.132.73 /bin/bash << 'EOF'
#		cd ~/
#		sudo mv guests.tar.gz ~/tars/widgets/
#		cd ~/tars/widgets/
#		loc=$(sudo wc -l ~/tars/widgets/legends | grep -o [0-9+])
#		loc=$((loc+1))
#
#		if [[ $loc -gt 8 ]]; then
#			echo ""
#			echo "ERROR: All 8 widget slots filled!"
#			echo "Please use Sherpa del to delete one widget before adding another."
#			sudo rm guests.tar.gz
#			exit
#		fi
#
#		sudo ./summit "./widget$loc"
#EOF

		rm guests.tar.gz
		echo ""
		echo -e "${LPURPLE}==> Installation finished! <==${NC}"
		echo ""
		echo -e "${GREEN}Be sure to check above for error messages!${NC}"
		;;
	del|-d)
		while true; do
		    read -p "WARNING: You are about to delete a widget from the mirror. Continue? [y/n]: " yn
		    case $yn in
		        [Yy]* ) break;;
		        [Nn]* ) exit;;
		        * ) echo -e "${RED}\nPlease answer y or n\n${NC}";;
		    esac
		done

		ipaddr=$(cat ./.ip)
		while true; do
		    read -p "Is the IP address shown on the Mirror $ipaddr? [y/n]: " yn
		    case $yn in
		        [Yy]* ) break;;
		        [Nn]* ) read -p "Enter the IP address shown on the Mirror: " ip && echo "$ip" > .ip && echo "Thank you. Please try 'sherpa ship' again." && exit;;
		        * ) echo -e "${RED}\nPlease answer y or n\n${NC}";;
		    esac
		done

		read -p "Enter the name of the widget you want to delete: " widget
		while true; do
		    read -p "DELETE: Delete $widget from the mirror? [y/n]: " yn
		    case $yn in
		        [Yy]* ) break;;
		        [Nn]* ) exit;;
		        * ) echo -e "${RED}\nPlease answer y or n\n${NC}";;
		    esac
		done

		ssh pi@"$ipaddr" "/home/pi/tars/node/purge.sh $widget"

		echo ""
		echo -e "${LPURPLE}==> $widget widget deleted! <==${NC}"
		echo ""
		echo -e "${GREEN}Be sure to check above for error messages!${NC}"
		
		;;
    add|-a)
		if [ ! -f "./.guests" ]; then # Check for .guests file
		    echo -e "${RED}No .guests file in this directory!${NC}"
		    echo -e "${RED}Be sure to navigate to the proper directory or use 'sherpa init' before using sherpa commands${NC}"
		    echo -e "${RED}Use 'sherpa help' for more options${NC}"
		    exit 1
		fi

		# Add the selected files to the .guests file
		for var in "$@"
		do
		    if [ "$var" != "add" ] && [ "$var" != "-a" ]; then # Skip over 'add' argument
		    	if [ ! -f "$var" ]; then # Ensure file actually exists
		    		echo -e "${RED}ERROR: $var file does not exist!${NC}"
		    		exit 1
		    	fi
		    	grep -q -x -F "$var" .guests || echo "$var" >> .guests # Don't add the same file twice
		    fi
		done
		
		;;
	rem|-r)
		if [ ! -f "./.guests" ]; then # Check for .guests file
		    echo -e "${RED}No .guests file in this directory!${NC}"
		    echo -e "${RED}Be sure to navigate to the proper directory or use 'sherpa init' before using sherpa commands${NC}"
		    echo -e "${RED}Use 'sherpa help' for more options${NC}"
		    exit 1
		fi

		# Remove the selected files to the .guests file
		for var in "$@"
		do
		    if [ "$var" != "rem" ] && [ "$var" != "-r" ]; then
		    	test=$(sed "/$var/d" ".guests") # Weird work around for sed not altering hidden files
		    	echo "$test" > .guests
		    fi
		done
		
		;;
	init|-i)
		# First check for a hidden sherpa_root file. This file signals that the current directory has the mirro source code files in it
		# This is needed so that browserify can properly package the use code into the mirror system code
		#if [ ! -f "./.sherpa_root" ]; then # Check for .sherpa_root file
		#    echo -e "${RED}ERROR: This directory is not a TARS source directory!${NC}"
		#    echo -e "${RED}You must only execute this command from within a directory sourced from the TARS project.${NC}"
		#    echo -e "${RED}Please download the TARS project and directory structure before using this command.${NC}"
		#    exit 1
		#fi

		# Initialize the current directory as a sherpa lobby
		touch .guests
		touch .metadata.json
		touch .ip

		# Create new metadata.json object and .guests file
		read -p "Enter widget name: " projname
		read -p "Enter your name: " creator
		read -p "Enter a description for your widget: " des
		read -p "Enter the IP address shown on the Mirror: " ip

		read -p "Continue? (Y/N): " confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] || exit 1

		echo "$ip" > .ip

		echo "{" > .metadata.json
		echo "  \"appname\": \"$projname\"," >> .metadata.json
		echo "  \"creator\": \"$creator\"," >> .metadata.json
		echo "  \"description\": \"$des\"" >> .metadata.json
		echo "}" >> .metadata.json
		
		;;
	who|-w)
		if [ ! -f "./.guests" ]; then # Check for .guests file
		    echo -e "${RED}No .guests file in this directory!${NC}"
		    echo -e "${RED}Be sure to navigate to the proper directory or use 'sherpa init' before using sherpa commands${NC}"
		    echo -e "${RED}Use 'sherpa help' for more options${NC}"
		    exit 1
		fi

		echo " "
		echo -e "${CYAN}Current known project files:${NC}" 
		cat .guests
		;;
	inst|-n)
		
		;;
	*)
		echo " "
		echo -e "${RED}ERROR: Unknown arguement${NC}"
		echo -e "${RED}User 'sherpa help' for assistance${NC}"
		;;
esac

